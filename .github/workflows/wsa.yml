name: Build WSA

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      arch:
        description: "Build arch"
        required: true
        default: "x64"
        type: choice
        options:
        - x64
        - arm64
        - x64 & arm64
      release_type:
        description: "WSA release type"
        required: true
        default: "insider fast"
        type: choice
        options:
        - retail
        - release preview
        - insider slow
        - insider fast
      magisk_apk:
        description: "Magisk version"
        required: true
        default: "stable"
        type: choice
        options:
        - stable
        - beta
        - canary
        - debug
      gapps_brand:
        description: "Brand of gapps"
        required: true
        default: "MindTheGapps"
        type: choice
        options:
        - none
        - MindTheGapps
        - OpenGApps
      gapps_variant:
        description: "Variants of gapps"
        required: true
        default: "pico"
        type: choice
        options:
        - none
        - super
        - stock
        - full
        - mini
        - micro
        - nano
        - pico
        - tvstock
        - tvmini
      remove_amazon:
        description: "Remove Amazon AppStore"
        required: true
        default: "remove"
        type: choice
        options:
        - keep
        - remove
      root_sol:
        description: "Root solution"
        required: true
        default: "magisk"
        type: choice
        options:
        - magisk
        - none
jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            let matrix = {};
            let arch = "${{ github.event.inputs.arch }}"
            switch ( arch ) {
              case "x64":
                matrix.arch = ["x64"];
                break;
              case "arm64":
                matrix.arch = ["arm64"];
                break;
              default:
                matrix.arch = ["x64", "arm64"];
                break;
            }
            core.setOutput("matrix",JSON.stringify(matrix));
  build:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote
      
      - name: Prepare Tmate
        run: sudo touch /continue
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      
      - name: Dependencies
        run: | 
          sudo apt-get update && sudo apt-get install -y whiptail setools lzip wine winetricks patchelf e2fsprogs python3-pip aria2 p7zip-full attr expect-dev
          pip list --disable-pip-version-check | grep -E "^requests " >/dev/null 2>&1 || python3 -m pip install requests
          winetricks list-installed | grep -E "^msxml6" >/dev/null 2>&1 || {
              cp -r ../wine/.cache/* ~/.cache
              winetricks msxml6 || abort
            }
        working-directory: MagiskOnWSALocal/scripts

      - name: "Run"
        id: run
        env:
          ARCH: ${{ matrix.arch }}
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
          MAGISK_VER: ${{ github.event.inputs.magisk_apk }}
          GAPPS_BRAND: ${{ github.event.inputs.gapps_brand }}
          GAPPS_VARIANT: ${{ github.event.inputs.gapps_variant }}
          ROOT_SOL: ${{ github.event.inputs.root_sol }}
        working-directory: MagiskOnWSALocal
        run: |
          cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
          chmod 0600 ~/.ssh/authorized_keys
          
          declare -A RELEASE_TYPE_MAP=(["retail"]="retail" ["release preview"]="RP" ["insider slow"]="WIS" ["insider fast"]="WIF")
          set -x
          
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null localhost "cd $(pwd);
            cd scripts
            export SHELL="/bin/bash"
            export TERM="xterm-256color"
            tty; export;
            
            set -x
            bash -x ./build.sh \
              --arch $ARCH \
              --release-type ${RELEASE_TYPE_MAP[$RELEASE_TYPE]} \
              --magisk-ver $MAGISK_VER \
              --gapps-brand $GAPPS_BRAND \
              --gapps-variant $GAPPS_VARIANT \
              --remove-amazon \
              --root-sol $ROOT_SOL \
              --compress \
            "
          path=$(find ./output -name "*.7z"|head -n 1)
          echo "##[set-output name=path;]$path"
          echo "##[set-output name=name;]$(basename $path)"
          
      - id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short "$GITHUB_SHA")"
        working-directory: MagiskOnWSALocal
      
      - uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with:
          tag: ${{ steps.vars.outputs.sha_short }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: rishabhgupta/split-by@v1
        id: split
        with:
          string: ${{ steps.run.outputs.name }}
          split-by: '_'

      - id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.checkTag.outputs.exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.split.outputs._1 }}
          release_name: ${{ steps.split.outputs._1 }}
          draft: false
          prerelease: false
      
      - uses: juliangruber/sleep-action@v1
        with:
          time: 10s

      - id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: MagiskOnWSALocal/${{ steps.run.outputs.path }}
          asset_name: ${{ steps.run.outputs.name }}
          asset_content_type: application/x-7z-compressed
